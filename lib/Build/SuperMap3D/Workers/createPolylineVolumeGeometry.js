define(["./when-f4cab1fd","./Cartesian2-94d75d5d","./arrayRemoveDuplicates-cf1d78b2","./BoundingRectangle-9b39d744","./buildModuleUrl-26ebe74f","./Cartographic-cd471038","./ComponentDatatype-509ef64d","./PolylineVolumeGeometryLibrary-f7a7ef56","./Check-5cf5e906","./GeometryAttribute-acc7fc74","./GeometryAttributes-dfda2cfe","./GeometryPipeline-3545e16b","./IndexDatatype-1cff6ae5","./Math-d934ba6b","./PolygonPipeline-846242d7","./FeatureDetection-fb5abd84","./VertexFormat-8d99016a","./Event-73ce694f","./RuntimeError-e6b88f4d","./WebGLConstants-42651efd","./Cartesian4-d3cdbab5","./EllipsoidTangentPlane-367859c8","./IntersectionTests-74b7d43a","./Plane-07f90ae1","./PolylinePipeline-f924f3c9","./EllipsoidGeodesic-1fd478b9","./EllipsoidRhumbLine-f8cea347","./AttributeCompression-8bd8a380","./EncodedCartesian3-f851e70d"],(function(e,t,n,o,r,i,a,s,p,c,l,u,d,h,f,y,g,m,v,b,k,_,P,L,w,C,E,A,D){"use strict";function T(n){var o=(n=e.u(n,e.u.EMPTY_OBJECT)).polylinePositions,r=n.shapePositions;if(!e.e(o))throw new p.t("options.polylinePositions is required.");if(!e.e(r))throw new p.t("options.shapePositions is required.");this._positions=o,this._shape=r,this._ellipsoid=t.t.clone(e.u(n.ellipsoid,t.t.WGS84)),this._cornerType=e.u(n.cornerType,s.S.ROUNDED),this._vertexFormat=g.n.clone(e.u(n.vertexFormat,g.n.DEFAULT)),this._granularity=e.u(n.granularity,h.e.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.enuCenter=e.u(n.enuCenter,i.o.ZERO);var a=1+o.length*i.o.packedLength;a+=1+r.length*t.o.packedLength+i.o.packedLength,this.packedLength=a+t.t.packedLength+g.n.packedLength+2}T.pack=function(n,o,r){if(!e.e(n))throw new p.t("value is required");if(!e.e(o))throw new p.t("array is required");r=e.u(r,0);var a,s=n._positions,c=s.length;for(o[r++]=c,a=0;a<c;++a,r+=i.o.packedLength)i.o.pack(s[a],o,r);var l=n._shape;for(c=l.length,o[r++]=c,a=0;a<c;++a,r+=t.o.packedLength)t.o.pack(l[a],o,r);return t.t.pack(n._ellipsoid,o,r),r+=t.t.packedLength,g.n.pack(n._vertexFormat,o,r),r+=g.n.packedLength,o[r++]=n._cornerType,o[r++]=n._granularity,i.o.pack(n.enuCenter,o,r),o};var F=t.t.clone(t.t.UNIT_SPHERE),G=new g.n,R={polylinePositions:void 0,shapePositions:void 0,ellipsoid:F,vertexFormat:G,cornerType:void 0,granularity:void 0,enuCenter:void 0};T.unpack=function(n,o,r){if(!e.e(n))throw new p.t("array is required");o=e.u(o,0);var a,s=n[o++],c=new Array(s);for(a=0;a<s;++a,o+=i.o.packedLength)c[a]=i.o.unpack(n,o);s=n[o++];var l=new Array(s);for(a=0;a<s;++a,o+=t.o.packedLength)l[a]=t.o.unpack(n,o);var u=t.t.unpack(n,o,F);o+=t.t.packedLength;var d=g.n.unpack(n,o,G);o+=g.n.packedLength;var h,f=n[o++],y=n[o++];return h=i.o.unpack(n,o),e.e(r)?(r._positions=c,r._shape=l,r._ellipsoid=t.t.clone(u,r._ellipsoid),r._vertexFormat=g.n.clone(d,r._vertexFormat),r._cornerType=f,r._granularity=y,r.enuCenter=h,r):(R.polylinePositions=c,R.shapePositions=l,R.cornerType=f,R.granularity=y,R.enuCenter=h,new T(R))};var x=new o.f;return T.createGeometry=function(t){for(var p=t._positions,h=n.D(p,i.o.equalsEpsilon),g=h.length,m=new Array(g),v=0;v<g;v++)m[v]=i.o.clone(h[v]);var b=t._shape;if(b=s.J.removeDuplicatesFromShape(b),!(h.length<2||b.length<3)){f.A.computeWindingOrder2D(b)===f.W.CLOCKWISE&&b.reverse();var k=o.f.fromPoints(b,x),_={};if(_.combinedPositions=s.J.computePositions(m,b,k,t,!0),!i.o.equals(t.enuCenter,i.o.ZERO)){var P=new Array(g);for(v=0;v<g;v++)P[v]=i.o.clone(h[v]);_.combinedLocalPositions=s.J.computeLocalPositions(P,b,k,t,!0,t.enuCenter)}return function(t,n,o,i){var s=t.combinedPositions,p=t.combinedLocalPositions,h=new l.a;i.position&&(h.position=new c.o({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:s}));var g,m,v,b,k,_,P=n.length,L=s.length/3,w=(L-2*P)/(2*P),C=f.A.triangulate(n),E=(w-1)*P*6+2*C.length,A=d.IndexDatatype.createTypedArray(L,E),D=2*P,T=0;for(g=0;g<w-1;g++){for(m=0;m<P-1;m++)_=(v=2*m+g*P*2)+D,k=(b=v+1)+D,A[T++]=b,A[T++]=v,A[T++]=k,A[T++]=k,A[T++]=v,A[T++]=_;k=(b=1+(v=2*P-2+g*P*2))+D,_=v+D,A[T++]=b,A[T++]=v,A[T++]=k,A[T++]=k,A[T++]=v,A[T++]=_}if(i.st||i.tangent||i.bitangent){var F,G,R=new Float32Array(2*L),x=1/(w-1),O=1/o.height,I=o.height/2,S=0;for(g=0;g<w;g++){for(F=g*x,G=O*(n[0].y+I),R[S++]=F,R[S++]=G,m=1;m<P;m++)G=O*(n[m].y+I),R[S++]=F,R[S++]=G,R[S++]=F,R[S++]=G;G=O*(n[0].y+I),R[S++]=F,R[S++]=G}for(m=0;m<P;m++)F=0,G=O*(n[m].y+I),R[S++]=F,R[S++]=G;for(m=0;m<P;m++)F=(w-1)*x,G=O*(n[m].y+I),R[S++]=F,R[S++]=G;h.st=new c.o({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(R)})}var q=L-2*P;for(g=0;g<C.length;g+=3){var N=C[g]+q,U=C[g+1]+q,W=C[g+2]+q;A[T++]=N,A[T++]=U,A[T++]=W,A[T++]=W+P,A[T++]=U+P,A[T++]=N+P}var B=new c.I({attributes:h,indices:A,boundingSphere:r.i.fromVertices(s),primitiveType:y._0x5962b7.TRIANGLES});if(i.normal&&(B=u.k.computeNormal(B)),i.tangent||i.bitangent){try{B=u.k.computeTangentAndBitangent(B)}catch{r.e("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(B.attributes.tangent=void 0),i.bitangent||(B.attributes.bitangent=void 0),i.st||(B.attributes.st=void 0)}return e.e(p)&&(B.attributes.position.values=p,B.attributes.position.componentDatatype=a.ComponentDatatype.FLOAT),B}(_,b,k,t._vertexFormat)}},function(n,o){return e.e(o)&&(n=T.unpack(n,o)),n._ellipsoid=t.t.clone(n._ellipsoid),T.createGeometry(n)}}));
